<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你好,我叫 千!</title>
  
  <subtitle>你好,我叫 千!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://myronliu.github.io/"/>
  <updated>2018-06-15T08:20:23.422Z</updated>
  <id>https://myronliu.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单实现一个Promise</title>
    <link href="https://myronliu.github.io/2018/06/14/promise/"/>
    <id>https://myronliu.github.io/2018/06/14/promise/</id>
    <published>2018-06-14T10:00:27.849Z</published>
    <updated>2018-06-15T08:20:23.422Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Promise-的概念"><a href="#Promise-的概念" class="headerlink" title="Promise 的概念"></a>Promise 的概念</h2><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。 它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了 Promise 对象。 所谓 Promise ，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。<br>Promise的出现，原本是为了解决回调地狱的问题</p><h2 id="Promise的原理分析"><a href="#Promise的原理分析" class="headerlink" title="Promise的原理分析"></a>Promise的原理分析</h2><p>其实promise原理说起来并不难，它内部有三个状态，分别是pending，fulfilled和rejected 。pending是对象创建后的初始状态，当对象fulfill（成功）时变为fulfilled，当对象reject（失败）时变为rejected。且只能从pengding变为fulfilled或rejected ，而不能逆向或从fulfilled变为rejected 、从rejected变为fulfilled。</p><h2 id="一、实现简单的promise实例，以及then方法的注册"><a href="#一、实现简单的promise实例，以及then方法的注册" class="headerlink" title="一、实现简单的promise实例，以及then方法的注册"></a>一、实现简单的promise实例，以及then方法的注册</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn1(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'步骤一：执行'</span>);</span><br><span class="line">    resolve(<span class="string">'1'</span>);</span><br><span class="line">  &#125;,500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Promise(fn1)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Promise(fn)&#123;</span><br><span class="line">  var cb;</span><br><span class="line">  var resolve = <span class="keyword">function</span>(v)&#123;</span><br><span class="line">    cb &amp;&amp; cb(<span class="string">"from then: "</span> + v);</span><br><span class="line">  &#125;</span><br><span class="line">  this.then = <span class="keyword">function</span>(c)&#123;</span><br><span class="line">    cb = c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、加入链式支持"><a href="#二、加入链式支持" class="headerlink" title="二、加入链式支持"></a>二、加入链式支持</h2><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn1(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'步骤一：执行'</span>);</span><br><span class="line">    resolve(<span class="string">'1'</span>);</span><br><span class="line">  &#125;,500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Promise(fn1)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"from then1: "</span> + val);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"from then2: "</span> + val)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Promise(fn)&#123;</span><br><span class="line">  var promise = this;</span><br><span class="line">  this.cb = [];</span><br><span class="line"></span><br><span class="line">  this.then = <span class="keyword">function</span>(c)&#123;</span><br><span class="line">    promise.cb.push(c);</span><br><span class="line">    <span class="built_in">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var resolve = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">    promise.cb.forEach(<span class="keyword">function</span>(c)&#123;</span><br><span class="line">      c &amp;&amp; c(val)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、解决问题：传入的是一个不包含异步操作的函数，resolve就会先于-then-执行，也就是说-then之后执行的-是一个空数组。"><a href="#三、解决问题：传入的是一个不包含异步操作的函数，resolve就会先于-then-执行，也就是说-then之后执行的-是一个空数组。" class="headerlink" title="三、解决问题：传入的是一个不包含异步操作的函数，resolve就会先于 then 执行，也就是说 then之后执行的 是一个空数组。"></a>三、解决问题：传入的是一个不包含异步操作的函数，resolve就会先于 then 执行，也就是说 then之后执行的 是一个空数组。</h2><h3 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn1(resolve, reject) &#123;</span><br><span class="line">  console.log(<span class="string">'步骤一：执行'</span>);</span><br><span class="line">  resolve(<span class="string">'1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Promise(fn1)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"from then1: "</span> + val);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"from then2: "</span> + val)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实现代码-2"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Promise(fn)&#123;</span><br><span class="line">  var promise = this;</span><br><span class="line">  promise.callbacks = [];</span><br><span class="line"></span><br><span class="line">  this.then = <span class="keyword">function</span>(cb)&#123;</span><br><span class="line">    promise.callbacks.push(cb);</span><br><span class="line">    <span class="built_in">return</span> this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var resolve = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      promise.callbacks.forEach(<span class="keyword">function</span>(cb)&#123;</span><br><span class="line">        cb(val)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, 0)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、引入状态-amp-加上异步结果的传递"><a href="#四、引入状态-amp-加上异步结果的传递" class="headerlink" title="四、引入状态 &amp; 加上异步结果的传递"></a>四、引入状态 &amp; 加上异步结果的传递</h2><h3 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn1(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">'步骤一：执行'</span>);</span><br><span class="line">    resolve(<span class="string">'1'</span>);</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Promise(fn1)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"from then1: "</span> + val);</span><br><span class="line">  <span class="built_in">return</span> 2;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"from then2: "</span> + val)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实现代码-3"><a href="#实现代码-3" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Promise(fn)&#123;</span><br><span class="line">  var promise = this;</span><br><span class="line">  promise.callbacks = [];</span><br><span class="line">  promise.status = <span class="string">'PENDING'</span>;</span><br><span class="line">  promise.value = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  this.then = <span class="keyword">function</span>(cb)&#123;</span><br><span class="line">    <span class="keyword">if</span>(promise.status == <span class="string">'PENDING'</span>)&#123;</span><br><span class="line">      promise.callbacks.push(cb);</span><br><span class="line">      <span class="built_in">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line">    cb(promise.value);</span><br><span class="line">    <span class="built_in">return</span> this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var resolve = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">    promise.value = val;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      promise.status = <span class="string">'FULFILLED'</span>;</span><br><span class="line">      promise.callbacks.forEach(<span class="keyword">function</span>(cb)&#123;</span><br><span class="line">        promise.value = cb(promise.value);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, 0)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、串行-Promise：是指在当前-promise-达到-fulfilled-状态后，即开始进行下一个-promise（后邻-promise）。"><a href="#五、串行-Promise：是指在当前-promise-达到-fulfilled-状态后，即开始进行下一个-promise（后邻-promise）。" class="headerlink" title="五、串行 Promise：是指在当前 promise 达到 fulfilled 状态后，即开始进行下一个 promise（后邻 promise）。"></a>五、串行 Promise：是指在当前 promise 达到 fulfilled 状态后，即开始进行下一个 promise（后邻 promise）。</h2><p>  例如我们先用ajax从后台获取用户的的数据，再根据该数据去获取其他数据。</p><h3 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn1(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'步骤一：执行'</span>);</span><br><span class="line">    resolve(<span class="string">'1'</span>);</span><br><span class="line">  &#125;,500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> fn2(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'步骤二：执行'</span>);</span><br><span class="line">    resolve(<span class="string">'2'</span>);</span><br><span class="line">  &#125;,100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Promise(fn1)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then1"</span>, val);</span><br><span class="line">  <span class="built_in">return</span> new Promise(fn2);</span><br><span class="line">  // <span class="built_in">return</span> <span class="string">"111212"</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then2"</span>, val);</span><br><span class="line">  <span class="built_in">return</span> 33;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then3"</span>, val);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实现代码-4"><a href="#实现代码-4" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Promise(fn)&#123;</span><br><span class="line">  var promise = this;</span><br><span class="line">  promise.value = <span class="string">''</span>;</span><br><span class="line">  promise._status = <span class="string">'PENDING'</span>;</span><br><span class="line">  promise._resolves = [];</span><br><span class="line"></span><br><span class="line">  promise.then = <span class="keyword">function</span>(cb)&#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(rs)&#123;</span><br><span class="line">      var handler = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">        promise.value = cb &amp;&amp; typeof cb == <span class="string">'function'</span> &amp;&amp; cb(val) || promise.value;</span><br><span class="line">        rs(promise.value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(promise._status == <span class="string">'PENDING'</span>)&#123;</span><br><span class="line">        promise._resolves.push(handler);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(promise._status == <span class="string">'FULFILLED'</span>)&#123;</span><br><span class="line">        cb(promise.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var resolve = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      promise._status = <span class="string">"FULFILLED"</span>;</span><br><span class="line">      promise._resolves.forEach(<span class="keyword">function</span>(f)&#123;</span><br><span class="line">        promise.value = f(val)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、-但这里还存在一个问题，就是我们的-then-里面函数不能对-Promise-对象进行处理。这里我们需要再次对-then-进行修改，使其能够处理-promise-对象"><a href="#六、-但这里还存在一个问题，就是我们的-then-里面函数不能对-Promise-对象进行处理。这里我们需要再次对-then-进行修改，使其能够处理-promise-对象" class="headerlink" title="六、 但这里还存在一个问题，就是我们的 then 里面函数不能对 Promise 对象进行处理。这里我们需要再次对 then 进行修改，使其能够处理 promise 对象"></a>六、 但这里还存在一个问题，就是我们的 then 里面函数不能对 Promise 对象进行处理。这里我们需要再次对 then 进行修改，使其能够处理 promise 对象</h2><p>解决之后的n个then在第二个promise执行之前就执行了</p><h3 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn1(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'步骤一：执行'</span>);</span><br><span class="line">    resolve(<span class="string">'1'</span>);</span><br><span class="line">  &#125;,500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> fn2(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'步骤二：执行'</span>);</span><br><span class="line">    resolve(<span class="string">'2'</span>);</span><br><span class="line">  &#125;,100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Promise(fn1)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then1"</span>, val);</span><br><span class="line">  <span class="built_in">return</span> new Promise(fn2);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then2"</span>, val);</span><br><span class="line">  <span class="built_in">return</span> 33;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then3"</span>, val);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实现代码-5"><a href="#实现代码-5" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Promise(fn)&#123;</span><br><span class="line">  var promise = this;</span><br><span class="line">  promise.value = <span class="string">''</span>;</span><br><span class="line">  promise._resolves = [];</span><br><span class="line">  promise._status = <span class="string">'PENDING'</span>;</span><br><span class="line"></span><br><span class="line">  this.then = <span class="keyword">function</span>(cb)&#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(rs)&#123;</span><br><span class="line">      var handler = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">        promise.value = cb &amp;&amp; typeof cb == <span class="string">'function'</span> &amp;&amp; cb(val) || promise.value;</span><br><span class="line">        <span class="keyword">if</span>(promise.value &amp;&amp; typeof promise.value[<span class="string">'then'</span>] == <span class="string">'function'</span>)&#123;</span><br><span class="line">          promise.value.then(<span class="keyword">function</span>(v)&#123;</span><br><span class="line">            rs(v)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          rs(promise.value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(promise._status == <span class="string">'PENDING'</span>)&#123;</span><br><span class="line">        promise._resolves.push(handler);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(promise._status == <span class="string">'FULFILLED'</span>)&#123;</span><br><span class="line">        rs(promise.value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var resolve = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">    promise._status = <span class="string">'FULFILLED'</span>;</span><br><span class="line">    promise._resolves.forEach(<span class="keyword">function</span>(cb)&#123;</span><br><span class="line">      cb(val)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、失败处理：异步操作不可能都成功，在异步操作失败时，标记其状态为-rejected，并执行注册的失败回调。"><a href="#七、失败处理：异步操作不可能都成功，在异步操作失败时，标记其状态为-rejected，并执行注册的失败回调。" class="headerlink" title="七、失败处理：异步操作不可能都成功，在异步操作失败时，标记其状态为 rejected，并执行注册的失败回调。"></a>七、失败处理：异步操作不可能都成功，在异步操作失败时，标记其状态为 rejected，并执行注册的失败回调。</h2><h3 id="测试代码-6"><a href="#测试代码-6" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn1(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'步骤一：执行'</span>);</span><br><span class="line">    reject(<span class="string">'1'</span>);</span><br><span class="line">  &#125;,500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> fn2(resolve, reject) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'步骤二：执行'</span>);</span><br><span class="line">    resolve(<span class="string">'2'</span>);</span><br><span class="line">  &#125;,100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Promise(fn1)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then1"</span>, val);</span><br><span class="line">  <span class="built_in">return</span> new Promise(fn2);</span><br><span class="line">&#125;, <span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then1_error: "</span>, val);</span><br><span class="line">  <span class="built_in">return</span> <span class="string">"from then1_error"</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then2"</span>, val);</span><br><span class="line">  <span class="built_in">return</span> 33;</span><br><span class="line">&#125;, <span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then2_error: "</span>, val);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then3"</span>, val);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实现代码-6"><a href="#实现代码-6" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Promise(fn)&#123;</span><br><span class="line">  var promise = this;</span><br><span class="line">  promise.value = <span class="string">''</span>;</span><br><span class="line">  promise._errReason = <span class="string">''</span>;</span><br><span class="line">  promise._resolves = [];</span><br><span class="line">  promise._rejects = [];</span><br><span class="line">  promise._status = <span class="string">'PENDING'</span>;</span><br><span class="line">  this.then = <span class="keyword">function</span>(cb, cr)&#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(rs, rj)&#123;</span><br><span class="line">      var handler = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">        promise.value = cb &amp;&amp; typeof cb == <span class="string">'function'</span> &amp;&amp; cb(val) || promise.value;</span><br><span class="line">        <span class="keyword">if</span>(promise.value &amp;&amp; typeof promise.value[<span class="string">'then'</span>] == <span class="string">'function'</span>)&#123;</span><br><span class="line">          promise.value.then(<span class="keyword">function</span>(v)&#123;</span><br><span class="line">            rs(v)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          rs(promise.value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      var errhandler = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">        promise._errReason = cr &amp;&amp; typeof cr == <span class="string">'function'</span> &amp;&amp; cr(val) || promise._errReason;</span><br><span class="line">        rj(promise._errReason);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(promise._status == <span class="string">'PENDING'</span>)&#123;</span><br><span class="line">        promise._resolves.push(handler);</span><br><span class="line">        promise._rejects.push(errhandler);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(promise._status == <span class="string">'FULFILLED'</span>)&#123;</span><br><span class="line">        handler(promise.value);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(promise._status == <span class="string">'REJECTED'</span>)&#123;</span><br><span class="line">        errhandler(promise._errReason);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  var resolve = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">    promise._status = <span class="string">'FULFILLED'</span>;</span><br><span class="line">    promise._resolves.forEach(<span class="keyword">function</span>(cb)&#123;</span><br><span class="line">      cb(val)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  var reject = <span class="keyword">function</span>(val)&#123;</span><br><span class="line">    promise._status = <span class="string">"REJECTED"</span>;</span><br><span class="line">    promise._rejects.forEach(<span class="keyword">function</span>(cb)&#123;</span><br><span class="line">      cb(val)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  fn(resolve, reject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、Promise-all-方法，定义：可以接收一个元素为-Promise-对象的数组作为参数，当这个数组里面所有的-Promise-对象都变为-resolve-时，该方法才会返回。"><a href="#八、Promise-all-方法，定义：可以接收一个元素为-Promise-对象的数组作为参数，当这个数组里面所有的-Promise-对象都变为-resolve-时，该方法才会返回。" class="headerlink" title="八、Promise.all 方法，定义：可以接收一个元素为 Promise 对象的数组作为参数，当这个数组里面所有的 Promise 对象都变为 resolve 时，该方法才会返回。"></a>八、Promise.all 方法，定义：可以接收一个元素为 Promise 对象的数组作为参数，当这个数组里面所有的 Promise 对象都变为 resolve 时，该方法才会返回。</h2><h3 id="测试代码-7"><a href="#测试代码-7" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var getData100 = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      resolve(<span class="string">'1000ms'</span>);</span><br><span class="line">    &#125;,1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var getData200 = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      resolve(<span class="string">'2000ms'</span>);</span><br><span class="line">    &#125;,2000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.all([getData100(), getData200()]).<span class="keyword">then</span>(<span class="keyword">function</span>(data)&#123;</span><br><span class="line">  console.log(data);      // [ <span class="string">"1000ms"</span>, <span class="string">"2000ms"</span> ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实现代码-7"><a href="#实现代码-7" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Promise.all = <span class="keyword">function</span>(arr)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!Array.isArray(arr))&#123;</span><br><span class="line">    throw new TypeError(<span class="string">"参数必须为Promise的数组"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  var result = [];</span><br><span class="line">  var length = count = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve, reject)&#123;</span><br><span class="line"></span><br><span class="line">    var resolver = <span class="keyword">function</span>(index)&#123;</span><br><span class="line">      <span class="built_in">return</span> <span class="keyword">function</span>(value)&#123;</span><br><span class="line">        resolverAll(index, value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var rejecter = <span class="keyword">function</span>(reason)&#123;</span><br><span class="line">      reject(reason)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var resolverAll = <span class="keyword">function</span>(index, value)&#123;</span><br><span class="line">      result[index] = value;</span><br><span class="line">      <span class="keyword">if</span>(--count == 0)&#123;</span><br><span class="line">        resolve(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; length; i++)&#123;</span><br><span class="line">      arr[i].<span class="keyword">then</span>(resolver(i), rejecter);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、Promise-race-方法，定义：该函数和-Promise-all-相类似，它同样接收一个数组，不同的是只要该数组中的任意一个-Promise-对象的状态发生变化（无论是-resolve-还是-reject）该方法都会返回。"><a href="#九、Promise-race-方法，定义：该函数和-Promise-all-相类似，它同样接收一个数组，不同的是只要该数组中的任意一个-Promise-对象的状态发生变化（无论是-resolve-还是-reject）该方法都会返回。" class="headerlink" title="九、Promise.race 方法，定义：该函数和 Promise.all 相类似，它同样接收一个数组，不同的是只要该数组中的任意一个 Promise 对象的状态发生变化（无论是 resolve 还是 reject）该方法都会返回。"></a>九、Promise.race 方法，定义：该函数和 Promise.all 相类似，它同样接收一个数组，不同的是只要该数组中的任意一个 Promise 对象的状态发生变化（无论是 resolve 还是 reject）该方法都会返回。</h2><p>我们只需要对 Promise.all 方法稍加修改就可以了。</p><h3 id="测试代码-8"><a href="#测试代码-8" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var getData100 = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      resolve(<span class="string">'1000ms'</span>);</span><br><span class="line">    &#125;,1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var getData200 = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      resolve(<span class="string">'2000ms'</span>);</span><br><span class="line">    &#125;,2000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">var getData300 = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      reject(<span class="string">'reject'</span>);</span><br><span class="line">    &#125;,3000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.race([getData100(), getData200(), getData300()]).<span class="keyword">then</span>(<span class="keyword">function</span>(data)&#123;</span><br><span class="line">  console.log(data);      // 1000ms</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实现代码-8"><a href="#实现代码-8" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Promise.race = <span class="keyword">function</span>(arr)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!Array.isArray(arr))&#123;</span><br><span class="line">    throw new TypeError(<span class="string">"参数必须为Promise的数组"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve, reject)&#123;</span><br><span class="line">    var length = arr.length;</span><br><span class="line">    var result = <span class="literal">true</span>;</span><br><span class="line">    var resolver = <span class="keyword">function</span>(value)&#123;</span><br><span class="line">      <span class="keyword">if</span>(result)&#123;</span><br><span class="line">        result = <span class="literal">false</span>;</span><br><span class="line">        resolve(value)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var rejecter = <span class="keyword">function</span>(reason)&#123;</span><br><span class="line">      reject(reason);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; length; i++)&#123;</span><br><span class="line">      arr[i].<span class="keyword">then</span>(resolver,rejecter);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、实现catch方法："><a href="#十、实现catch方法：" class="headerlink" title="十、实现catch方法："></a>十、实现catch方法：</h2><h3 id="测试代码-9"><a href="#测试代码-9" class="headerlink" title="测试代码"></a>测试代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">new Promise(<span class="keyword">function</span>(resolve, reject)&#123;</span><br><span class="line">  resolve(<span class="string">"aaa"</span>)// reject(<span class="string">"aaa"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(val)&#123;</span><br><span class="line">  console.log(<span class="string">"then1: "</span> + val)</span><br><span class="line">  <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">    reject(<span class="string">"bb"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="keyword">function</span>(a)&#123;</span><br><span class="line">  console.log(<span class="string">'bb'</span>);</span><br><span class="line">  <span class="built_in">return</span> <span class="string">"bb: "</span> + a;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="keyword">function</span>(a)&#123;</span><br><span class="line">  console.log(<span class="string">"catch: "</span>+a)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实现代码-9"><a href="#实现代码-9" class="headerlink" title="实现代码"></a>实现代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Promise(fn) &#123;</span><br><span class="line">  var promise = this;</span><br><span class="line">      promise._value;</span><br><span class="line">      promise._reason;</span><br><span class="line">      promise._resolves = [];</span><br><span class="line">      promise._rejects = [];</span><br><span class="line">      promise._status = <span class="string">'PENDING'</span>;</span><br><span class="line"></span><br><span class="line">  this.then = <span class="keyword">function</span> (onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">      <span class="keyword">function</span> handle(value) &#123;</span><br><span class="line">        var ret = typeof onFulfilled === <span class="string">'function'</span> &amp;&amp; onFulfilled(value) || value;</span><br><span class="line">        <span class="keyword">if</span>(ret &amp;&amp; typeof ret [<span class="string">'then'</span>] == <span class="string">'function'</span>)&#123;</span><br><span class="line">          ret.then(<span class="keyword">function</span>(value)&#123;</span><br><span class="line">            resolve(value);</span><br><span class="line">          &#125;,<span class="keyword">function</span>(reason)&#123;</span><br><span class="line">            reject(reason);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(ret);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> errback(reason)&#123;</span><br><span class="line">        reason = typeof onRejected === <span class="string">'function'</span> &amp;&amp; onRejected(reason) || reason;</span><br><span class="line">        reject(reason);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (promise._status === <span class="string">'PENDING'</span>) &#123;</span><br><span class="line">        promise._resolves.push(handle);</span><br><span class="line">        promise._rejects.push(errback);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(promise._status === <span class="string">'FULFILLED'</span>)&#123;</span><br><span class="line">        handle(promise._value);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(promise._status === <span class="string">'REJECTED'</span>) &#123;</span><br><span class="line">        errback(promise._reason);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  this.catch = <span class="keyword">function</span>(cb)&#123;</span><br><span class="line">    promise.catchFunc = cb;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> resolve(value) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      promise._status = <span class="string">"FULFILLED"</span>;</span><br><span class="line">      promise._resolves.forEach(<span class="keyword">function</span> (callback) &#123;</span><br><span class="line">        promise._value = callback( value);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> reject(value) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      promise._status = <span class="string">"REJECTED"</span>;</span><br><span class="line">      promise._reason = value;</span><br><span class="line">      promise._rejects.forEach(<span class="keyword">function</span> (callback) &#123;</span><br><span class="line">        promise._reason = callback(value);</span><br><span class="line">      &#125;)</span><br><span class="line">      promise.catchFunc &amp;&amp; promise.catchFunc(promise._reason);</span><br><span class="line">    &#125;,0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve, reject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Promise-的概念&quot;&gt;&lt;a href=&quot;#Promise-的概念&quot; class=&quot;headerlink&quot; title=&quot;Promise 的概念&quot;&gt;&lt;/a&gt;Promise 的概念&lt;/h2&gt;&lt;p&gt;Promise 是异步编程的一种解决方案，比传统的解决方案
      
    
    </summary>
    
    
      <category term="Promise" scheme="https://myronliu.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo-theme-skapp主题博客</title>
    <link href="https://myronliu.github.io/2018/06/07/test/"/>
    <id>https://myronliu.github.io/2018/06/07/test/</id>
    <published>2018-06-07T09:32:38.512Z</published>
    <updated>2018-06-07T11:11:21.362Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="官网的中文文档"><a href="#官网的中文文档" class="headerlink" title="官网的中文文档"></a>官网的中文文档</h2><p><a href="https://github.com/Mrminfive/hexo-theme-skapp/blob/master/README-cn.md" target="_blank" rel="noopener">hexo-theme-skapp 中文简介</a></p><h2 id="针对搭建之后出现了js引用错误和本地图片的显示问题"><a href="#针对搭建之后出现了js引用错误和本地图片的显示问题" class="headerlink" title="针对搭建之后出现了js引用错误和本地图片的显示问题"></a>针对搭建之后出现了js引用错误和本地图片的显示问题</h2><p>1、搭建hexo-theme-skapp主题博客，<a href="http://www.gkl2013.top/2017/10/04/Github+Hexo/" target="_blank" rel="noopener">戳这里</a><br>2、博客的favicon图标，支持本地及在线两种方式，本地请将图标放置于 themes/hexo-theme-skapp/source/img 目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ _config.yml 文件下配置：favicon_ico: /img/favicon.ico</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;官网的中文文档&quot;&gt;&lt;a href=&quot;#官网的中文文档&quot; class=&quot;headerlink&quot; title=&quot;官网的中文文档&quot;&gt;&lt;/a&gt;官网的中文文档&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Mrminfive/hexo-th
      
    
    </summary>
    
    
      <category term="hexo-theme-skapp" scheme="https://myronliu.github.io/tags/hexo-theme-skapp/"/>
    
  </entry>
  
  <entry>
    <title>开始吧～</title>
    <link href="https://myronliu.github.io/2018/06/07/hello-world/"/>
    <id>https://myronliu.github.io/2018/06/07/hello-world/</id>
    <published>2018-06-07T05:48:46.102Z</published>
    <updated>2018-06-07T11:26:31.209Z</updated>
    
    <content type="html"><![CDATA[<hr><p>先自我介绍一下，我是一个前端开发，主要技术栈是react+node，菜鸟一枚。</p><p>其实搭建这个博客的目的，主要是为了记录自己的一些读书笔记啦、心得体会啦、经验教训啦、以后可能会有日记啊之类的吧。搭建博客的工具嘛就是这个啦～ <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! 有啥问题可以联系我～嗯，联系方式将来再公布吧，哈哈哈哈.</p><h2 id="自己的github"><a href="#自己的github" class="headerlink" title="自己的github"></a>自己的github</h2><h3 id="react-native-qrcode-logo"><a href="#react-native-qrcode-logo" class="headerlink" title="react-native-qrcode-logo"></a>react-native-qrcode-logo</h3><p>[react-native-qrcode-logo](<a href="https://github.com/myronliu/react-native-qrcode-logo）" target="_blank" rel="noopener">https://github.com/myronliu/react-native-qrcode-logo）</a></p><h3 id="一个简单的服务端渲染的框架——–-gt-约750行代码"><a href="#一个简单的服务端渲染的框架——–-gt-约750行代码" class="headerlink" title="一个简单的服务端渲染的框架——–&gt;约750行代码"></a>一个简单的服务端渲染的框架——–&gt;约750行代码</h3><p><a href="https://github.com/myronliu/ssr-koa-react-redux" target="_blank" rel="noopener">ssr-koa-react-redux</a></p><h3 id="自己练习写了一个express"><a href="#自己练习写了一个express" class="headerlink" title="自己练习写了一个express"></a>自己练习写了一个express</h3><p><a href="https://github.com/myronliu/nodeapp" target="_blank" rel="noopener">nodeapp</a></p><h2 id="另外写下发布文章更新文章的一些命令吧"><a href="#另外写下发布文章更新文章的一些命令吧" class="headerlink" title="另外写下发布文章更新文章的一些命令吧"></a>另外写下发布文章更新文章的一些命令吧</h2><h3 id="重新生成-amp-部署博客"><a href="#重新生成-amp-部署博客" class="headerlink" title="重新生成&amp;部署博客"></a>重新生成&amp;部署博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ 重新生成博客：hexo g</span><br><span class="line">$ 本地预览博客：hexo s -p 9090</span><br><span class="line">$ 最终部署博客：hexo d</span><br></pre></td></tr></table></figure><h3 id="发布、更新、删除文章"><a href="#发布、更新、删除文章" class="headerlink" title="发布、更新、删除文章"></a>发布、更新、删除文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;先自我介绍一下，我是一个前端开发，主要技术栈是react+node，菜鸟一枚。&lt;/p&gt;
&lt;p&gt;其实搭建这个博客的目的，主要是为了记录自己的一些读书笔记啦、心得体会啦、经验教训啦、以后可能会有日记啊之类的吧。搭建博客的工具嘛就是这个啦～ &lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="javascript, node, react" scheme="https://myronliu.github.io/tags/javascript-node-react/"/>
    
  </entry>
  
</feed>
